{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  id: \"employee-table\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"empty-table\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"table-container\"\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"onUpdate:modelValue\"];\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  key: 2\n};\nconst _hoisted_8 = [\"onUpdate:modelValue\"];\nconst _hoisted_9 = {\n  key: 3\n};\nconst _hoisted_10 = {\n  key: 4\n};\nconst _hoisted_11 = [\"onClick\"];\nconst _hoisted_12 = {\n  key: 5\n};\nconst _hoisted_13 = [\"onClick\"];\nconst _hoisted_14 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$props.employees.length < 1 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"No Employees\")) : (_openBlock(), _createElementBlock(\"table\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Emplyee name\"), _createElementVNode(\"th\", null, \"Emplyee email\"), _createElementVNode(\"th\", null, \"Action\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.employees, employee => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: employee.id\n    }, [$data.editing == employee.id ? (_openBlock(), _createElementBlock(\"td\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => employee.name = $event\n    }, null, 8 /* PROPS */, _hoisted_5), [[_vModelText, employee.name]])])) : (_openBlock(), _createElementBlock(\"td\", _hoisted_6, _toDisplayString(employee.name), 1 /* TEXT */)), $data.editing == employee.id ? (_openBlock(), _createElementBlock(\"td\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => employee.email = $event\n    }, null, 8 /* PROPS */, _hoisted_8), [[_vModelText, employee.email]])])) : (_openBlock(), _createElementBlock(\"td\", _hoisted_9, _toDisplayString(employee.email), 1 /* TEXT */)), $data.editing == employee.id ? (_openBlock(), _createElementBlock(\"td\", _hoisted_10, [_createElementVNode(\"button\", {\n      onClick: $event => $options.editEmployee(employee)\n    }, \"Save\", 8 /* PROPS */, _hoisted_11), _createElementVNode(\"button\", {\n      onClick: _cache[0] || (_cache[0] = $event => $data.editing == null)\n    }, \"Cancel\")])) : (_openBlock(), _createElementBlock(\"td\", _hoisted_12, [_createElementVNode(\"button\", {\n      onClick: $event => $options.editMode(employee)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_13), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.$emit('delete:employee', employee.id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_14)]))]);\n  }), 128 /* KEYED_FRAGMENT */))])]))]);\n}","map":{"version":3,"names":["id","key","class","_createElementBlock","_hoisted_1","$props","employees","length","_hoisted_2","_hoisted_3","_createElementVNode","_Fragment","_renderList","employee","$data","editing","_hoisted_4","type","$event","name","_hoisted_5","_hoisted_6","_toDisplayString","_hoisted_7","email","_hoisted_8","_hoisted_9","_hoisted_10","onClick","$options","editEmployee","_hoisted_11","_cache","_hoisted_12","editMode","_hoisted_13","_ctx","$emit","_hoisted_14"],"sources":["C:\\Users\\hushanh\\Thushanth_Vue_Example\\Vue\\myapp\\src\\components\\EmployeeTable.vue"],"sourcesContent":["<template>\r\n    <div id=\"employee-table\">\r\n        <p v-if=\"employees.length<1\" class=\"empty-table\">No Employees</p>\r\n        <table v-else class=\"table-container\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Emplyee name</th>\r\n                    <th>Emplyee email</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"employee in employees\" :key=\"employee.id\">\r\n                    <td v-if=\"editing==employee.id\"><input type =\"text\" v-model=\"employee.name\"></td>\r\n                    <td v-else>{{ employee.name }}</td>\r\n                    <td v-if=\"editing==employee.id\"><input type =\"text\" v-model=\"employee.email\"></td>\r\n                    <td v-else>{{ employee.email }}</td>\r\n                    <td v-if=\"editing==employee.id\">\r\n                        <button @click=\"editEmployee(employee)\">Save</button>\r\n                        <button @click=\"editing==null\">Cancel</button>\r\n                    </td>\r\n                    <td v-else>\r\n                        <button @click=\"editMode(employee)\">Edit</button>\r\n                        <button @click=\"$emit('delete:employee',employee.id)\">Delete</button>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    name:'employee-table',\r\n    props:{\r\n        employees: Array\r\n    },\r\n    data(){\r\n        return{\r\n            editing:null,\r\n            employee:{\r\n                name:'',\r\n                email:''\r\n            }\r\n        }\r\n    },\r\n    methods:{\r\n        editMode(employee){\r\n            this.editing = employee.id;\r\n        },\r\n        editEmployee(employee){\r\n            if(employee.name=='' || employee.email== ''){\r\n                return;\r\n            }\r\n            this.$emit('edit:employee',employee.id,employee)\r\n            this\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\nbutton{\r\n    margin: 0 0.5rem 0 0;   \r\n}\r\n</style>"],"mappings":";;EACSA,EAAE,EAAC;AAAgB;;EAD5BC,GAAA;EAEqCC,KAAK,EAAC;;;EAF3CD,GAAA;EAGsBC,KAAK,EAAC;;;EAH5BD,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;oBAAA;;EAAAA,GAAA;AAAA;oBAAA;oBAAA;;uBACIE,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BOC,MAAA,CAAAC,SAAS,CAACC,MAAM,Q,cAAzBJ,mBAAA,CAAiE,KAAjEK,UAAiE,EAAhB,cAAY,M,cAC7DL,mBAAA,CAwBQ,SAxBRM,UAwBQ,G,0BAvBJC,mBAAA,CAMQ,gBALJA,mBAAA,CAIK,aAHDA,mBAAA,CAAqB,YAAjB,cAAY,GAChBA,mBAAA,CAAsB,YAAlB,eAAa,GACjBA,mBAAA,CAAe,YAAX,QAAM,E,wBAGlBA,mBAAA,CAeQ,iB,kBAdJP,mBAAA,CAaKQ,SAAA,QAzBrBC,WAAA,CAYuCP,MAAA,CAAAC,SAAS,EAArBO,QAAQ;yBAAnBV,mBAAA,CAaK;MAb8BF,GAAG,EAAEY,QAAQ,CAACb;QACnCc,KAAA,CAAAC,OAAO,IAAEF,QAAQ,CAACb,EAAE,I,cAA9BG,mBAAA,CAAiF,MAbrGa,UAAA,G,gBAaoDN,mBAAA,CAA4C;MAArCO,IAAI,EAAE,MAAM;MAbvE,uBAAAC,MAAA,IAaiFL,QAAQ,CAACM,IAAI,GAAAD;4BAb9FE,UAAA,I,cAaiFP,QAAQ,CAACM,IAAI,E,sBAC1EhB,mBAAA,CAAmC,MAdvDkB,UAAA,EAAAC,gBAAA,CAckCT,QAAQ,CAACM,IAAI,mBACjBL,KAAA,CAAAC,OAAO,IAAEF,QAAQ,CAACb,EAAE,I,cAA9BG,mBAAA,CAAkF,MAftGoB,UAAA,G,gBAeoDb,mBAAA,CAA6C;MAAtCO,IAAI,EAAE,MAAM;MAfvE,uBAAAC,MAAA,IAeiFL,QAAQ,CAACW,KAAK,GAAAN;4BAf/FO,UAAA,I,cAeiFZ,QAAQ,CAACW,KAAK,E,sBAC3ErB,mBAAA,CAAoC,MAhBxDuB,UAAA,EAAAJ,gBAAA,CAgBkCT,QAAQ,CAACW,KAAK,mBAClBV,KAAA,CAAAC,OAAO,IAAEF,QAAQ,CAACb,EAAE,I,cAA9BG,mBAAA,CAGK,MApBzBwB,WAAA,GAkBwBjB,mBAAA,CAAqD;MAA5CkB,OAAK,EAAAV,MAAA,IAAEW,QAAA,CAAAC,YAAY,CAACjB,QAAQ;OAAG,MAAI,iBAlBpEkB,WAAA,GAmBwBrB,mBAAA,CAA8C;MAArCkB,OAAK,EAAAI,MAAA,QAAAA,MAAA,MAAAd,MAAA,IAAEJ,KAAA,CAAAC,OAAO;OAAQ,QAAM,E,oBAEzCZ,mBAAA,CAGK,MAxBzB8B,WAAA,GAsBwBvB,mBAAA,CAAiD;MAAxCkB,OAAK,EAAAV,MAAA,IAAEW,QAAA,CAAAK,QAAQ,CAACrB,QAAQ;OAAG,MAAI,iBAtBhEsB,WAAA,GAuBwBzB,mBAAA,CAAqE;MAA5DkB,OAAK,EAAAV,MAAA,IAAEkB,IAAA,CAAAC,KAAK,oBAAmBxB,QAAQ,CAACb,EAAE;OAAG,QAAM,iBAvBpFsC,WAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}